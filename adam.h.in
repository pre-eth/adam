#include "cmd.h"

#define ARGCOUNT 5

class ADAM : Command {
  public:
    ADAM() : Command("@PROJECT_NAME@", "@PROJECT_DESCRIPTION@", 1, 4,
    "v@PROJECT_VERSION@", NULL, NULL) {
      PROGARGS = ARGS; 
      PROGHELP = ARGSHELP;
      PROGARGC = ARGCOUNT;
      OPTSTR = "in:p:r:u:";
    };

    u8 exec(int argc, char** argv);
    // Precision of random integers to generate, default is unsigned 64 bit ints.
    // If a lower precision integer is requested, an entry from
    enum Precision { U64 = 0, U32 = 32, U16 = 16, U8 = 8};
        
  private:
    u8 matchOption(char opt, const char* val);

    u8   precision{U64};
    u8   results{1};
    u8   rounds{1};
    u8   undulation_cycle{0};
    bool invert{false};

    const char* ARGS[ARGCOUNT] = {"i", "n", "p", "r", "u"};
    const char* ARGSHELP[ARGCOUNT] = {
      "Inverts the polarity of the compression permutation",
      "Number of results to return (default 1, max 256)",
      "Desired size (8, 16, 32) of returned numbers if you need less precision than 64-bit",
      "Number of rounds to mangle buffer. Multiply by 4 to get true iteration count (ex. 2 rounds = 8 iterations)",
      "Compression granularity, or the undulation period. Accepts 2 (DOUBLE) or 4 (QUADRUPLE)",
    };
};